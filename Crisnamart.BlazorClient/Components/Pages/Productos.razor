@page "/productos"
@using Crisnamart.DB
@inject IHttpClientFactory HttpClientFactory

<h3>Catálogo de Productos</h3>

@if (errorMsg is not null) {
	<div class="alert alert-danger">@errorMsg</div>
} else if (productos is null) {
	<p>Cargando productos...</p>
} else {
	<div class="row">
		@foreach (var p in productos) {
			<div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
				<div class="card shadow-sm h-100">
					<img src="@GetImageUrl(p.Ruta)" class="card-img-top" alt="@p.Descripcion" />
					<div class="card-body text-center">
						<h6 class="card-title">@p.Descripcion</h6>
						<small class="text-muted">@p.CodigoUnico</small>
					</div>
				</div>
			</div>
		}
	</div>

}

@code {
	private List<Producto>? productos;
	private string? errorMsg;

	protected override async Task OnInitializedAsync() {
		try {
			var http = HttpClientFactory.CreateClient("ApiClient");
			productos = await http.GetFromJsonAsync<List<Producto>>("api/productos");
		} catch (HttpRequestException ex) {
			errorMsg = $"No se pudo conectar con el servidor. {ex.Message}";
		} catch (Exception ex) {
			errorMsg = $"Error al cargar los productos: {ex.Message}";
		}
	}

	private string GetImageUrl(string ruta) {
		if (string.IsNullOrWhiteSpace(ruta))
			return "/images/no-image.jpg";

		var segments = ruta.Split('/', '\\');
		var encoded = string.Join('/', segments.Select(Uri.EscapeDataString));
		return "/images/" + encoded;
	}
}
